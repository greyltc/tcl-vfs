# Commands covered:  vfs::filesystem
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2001 by Vince Darley.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require vfs

proc filelistrelative {filelist {remove ""}} {
    if {[llength $remove]} {
	set newlist {}
	foreach f $filelist {
	    if {[lsearch -exact $remove $f] == -1} {
		lappend newlist $f
	    }
	}
	set filelist $newlist
    }
    set dir [file normalize [file dirname [info script]]]
    set len [string length $dir]
    incr len
    set res {}
    foreach d $filelist {
	if {[string first $dir $d] == 0} {
	   lappend res [string range $d $len end]
       } else {
	   lappend res $d
       }
    }
    set res
}

test vfs-1.1 {mount unmount} {
    catch {unset res}
    vfs::filesystem mount foo bar
    set res [list [catch {vfs::filesystem unmount foo bar} err]]
    lappend res $err
    vfs::filesystem unmount foo
    unset err
    set res
} {1 {wrong # args: should be "vfs::filesystem unmount path"}}


# Test 2.x sub-interps

test vfs-2.1 {mount unmount in sub interp} {
    catch {interp delete a}
    catch {unset res}
    set res {}
    set remove [vfs::filesystem info]
    vfs::filesystem mount foo bar
    interp create a
    a eval {package require vfs}
    a eval {vfs::filesystem mount foo2 bar2}
    eval lappend res [vfs::filesystem info]
    a eval {vfs::filesystem unmount foo2}
    interp delete a
    eval lappend res [vfs::filesystem info]
    vfs::filesystem unmount foo
    filelistrelative $res $remove
} {foo2 foo foo}

test vfs-2.2 {mount, delete sub interp} {
    catch {interp delete a}
    catch {unset res}
    set remove [vfs::filesystem info]
    vfs::filesystem mount foo bar
    interp create a
    a eval {package require vfs}
    a eval {vfs::filesystem mount foo2 bar2}
    set res {}
    eval lappend res [vfs::filesystem info]
    interp delete a
    eval lappend res [vfs::filesystem info]
    vfs::filesystem unmount foo
    filelistrelative $res $remove
} {foo2 foo foo}

# cleanup
::tcltest::cleanupTests
return
