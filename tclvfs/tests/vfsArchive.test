# Commands covered: running our tests from inside a 'zip' vfs.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2001-2002 by Vince Darley.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

tcltest::testConstraint nativefs \
  [string equal [lindex [file system [info script]] 0] "native"]

proc makeAndMountZipArchive {} {
    puts stdout "Zipping tests" ; update
    cd [file dirname [file dirname [file normalize [info script]]]]
    set filelist [concat [glob -dir [pwd] -join -tails tests *.test] \
      [glob -dir [pwd] -join -tails tests *.tcl]]
    catch {file delete [file join tests tests.zip]}
    eval [list exec zip -q -9 [file join tests tests.zip]] $filelist
    puts stdout "Done zipping"
    cd [file dirname [info script]]
    
    package require vfs
    set mount [vfs::zip::Mount tests.zip tests.zip]
    cd tests.zip
    return [list vfs::zip::Unmount $mount tests.zip]
}

# This actually calls the test suite recursively, which probably
# causes some problems, although it shouldn't really!
test vfsArchive-1.1 {run tests in zip archive} {nativefs} {
    set testdir [pwd]
    puts stderr $testdir
    package require vfs
    if {[catch {makeAndMountZipArchive} unmount]} {
	set res "Couldn't make zip archive to test with: $unmount"
	puts stderr $::auto_path
    } else {
	cd tests
	source all.tcl
	cd ..
	cd ..
	puts [pwd]
	eval $unmount
	set res "ok"
    }
    cd $testdir
    set res
} {ok}



